{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","onClick","toggleMode","type","id","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","toLowerCase","split","join","length","defaultProps","aboutText","App","setMode","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oMAIe,SAASA,EAAOC,GAC3B,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACI,sBAAKD,UAAU,kBAAf,UACI,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAKxC,sBAAKH,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAO,SAA3E,UACI,uBAAOD,UAAU,mBAAmBI,QAASL,EAAMM,WAAYC,KAAK,WAAWC,GAAG,2BAClF,uBAAOP,UAAU,mBAAmBQ,QAAQ,yBAA5C,qCCdT,SAASC,EAASV,GAC7B,IAqCA,EAAwBW,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAGA,OACI,qCACI,sBAAKZ,UAAU,YAAYa,MAAO,CAAEC,MAAsB,SAAff,EAAME,KAAkB,QAAU,WAA7E,UACI,6BAAKF,EAAMgB,UACX,qBAAKf,UAAU,OAAf,SACI,0BAAUA,UAAU,eAAegB,MAAOL,EAAMM,SAzBzC,SAACC,GAEpBN,EAAQM,EAAMC,OAAOH,OACrBJ,EAAQM,EAAMC,OAAOH,QAsBiEH,MAAO,CAAEO,gBAAgC,SAAfrB,EAAME,KAAkB,QAAU,QAASa,MAAsB,SAAff,EAAME,KAAkB,QAAU,WAAaM,GAAG,QAAQc,KAAK,QAEzN,wBAAQrB,UAAU,uBAAuBI,QA/C/B,WAElB,IAAIkB,EAAUX,EAAKY,cACnBX,EAAQU,IA4CA,kCACA,wBAAQtB,UAAU,4BAA4BI,QAzCpC,WAClB,IAAIkB,EAAUX,EAAKa,cACnBZ,EAAQU,IAuCA,kCACA,wBAAQtB,UAAU,4BAA4BI,QApCjC,WAErBQ,EADc,IAEdA,EAFc,KAmCN,wBACA,wBAAQZ,UAAU,4BAA4BI,QApBhC,WACtB,IAAIkB,EAAUX,EAAKc,MAAM,QACzBb,EAAQU,EAAQI,KAAK,MACrBd,EAAQU,EAAQI,KAAK,OAiBb,oCAEJ,sBAAK1B,UAAU,iBAAiBa,MAAO,CAAEC,MAAsB,SAAff,EAAME,KAAkB,QAAU,WAAlF,UACI,sDACA,8BAAIU,EAAKc,MAAM,KAAKE,OAApB,cAAuChB,EAAKgB,OAA5C,iBACA,8BAAI,KAAQhB,EAAKc,MAAM,KAAKE,OAA5B,yBD/BhB7B,EAAO8B,aAAe,CAClBzB,MAAO,iBACP0B,UAAW,SEeAC,MAnCf,WACE,MAAwBpB,mBAAS,SAAjC,mBAAOT,EAAP,KAAa8B,EAAb,KAoBA,OACE,qCAGA,cAACjC,EAAD,CAAQK,MAAM,cAAcF,KAAMA,EAAMI,WAnBvB,WACL,UAATJ,GACD8B,EAAQ,QACRC,SAASC,KAAKpB,MAAMO,gBAAkB,QAEtCY,SAAS7B,MAAQ,2BAIjB4B,EAAQ,SACRC,SAASC,KAAKpB,MAAMO,gBAAkB,QAEtCY,SAAS7B,MAAQ,8BASnB,qBAAKH,UAAU,iBAAf,SACA,cAACS,EAAD,CAAUM,QAAQ,0BAA0Bd,KAAMA,UCxBvCiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BZ,K","file":"static/js/main.db4860c6.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n              \r\n                \r\n               \r\n                   \r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n               \r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n  };","import React, { useState } from 'react'\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText)\r\n        setText(newText);\r\n\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On change\");\r\n        setText(event.target.value)\r\n        setText(event.target.value)\r\n    }\r\n\r\n\r\n\r\n\r\n    // Credits: Coding Wala\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        setText(newText.join(\" \"));\r\n\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n   \r\n    \r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? 'black' : 'white', color: props.mode === 'dark' ? 'green' : '#042743' }} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h2>Your text summary...</h2>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\n\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n \n\n  \n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = 'black';\n     \n      document.title = 'Words Tool - Dark Mode';\n     \n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      \n      document.title = 'Words Tool - Light Mode';\n    }\n  }\n  return (\n    <>\n   \n  \n    <Navbar title=\"Words Tools\" mode={mode} toggleMode={toggleMode} />\n  \n    <div className=\"container my-3\">\n    <TextForm heading=\"Enter Your Text here...\" mode={mode}/>\n   \n    </div>\n    \n    </> \n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}